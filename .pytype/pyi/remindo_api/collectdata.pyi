# (generated with --quick)

import collections
from typing import Any, Dict, List, Type

OrderedDict: Type[collections.OrderedDict]
csv: module
datetime: Type[datetime.datetime]
logger: logging.Logger
logging: module
os: module
pd: Any
studies: Any
time: module

class RemindoCollect:
    _base_directory: str
    _cluster_data_list: List[collections.OrderedDict[str, Any]]
    _data_directory: Any
    _item_data_list: List[collections.OrderedDict[str, Any]]
    _moment: int
    _moment_data_list: List[collections.OrderedDict[str, Any]]
    _moment_id_list: list
    _moment_result_data_list: List[collections.OrderedDict[str, Any]]
    _rclient: Any
    _recipe: int
    _recipe_data_list: List[collections.OrderedDict[str, Any]]
    _recipe_id_list: list
    _recipe_moment_id_dict: Dict[nothing, list]
    _reliability_data_list: List[collections.OrderedDict[str, Any]]
    _result_data_list: List[nothing]
    _since_date: Any
    _stats_data_list: List[collections.OrderedDict[str, Any]]
    _study_data_list: List[collections.OrderedDict[str, Any]]
    def __init__(self, rclient, data_directory, since_date) -> None: ...
    def _parse_cluster_data(self, cluster_obj) -> collections.OrderedDict[str, Any]: ...
    def _parse_item_data(self, item_obj) -> collections.OrderedDict[str, Any]: ...
    def _parse_moment_data(self, moment_obj) -> collections.OrderedDict[str, Any]: ...
    def _parse_moment_result_data(self, moment_obj) -> collections.OrderedDict[str, Any]: ...
    def _parse_recipe_data(self, recipe_obj) -> collections.OrderedDict[str, Any]: ...
    def _parse_reliability_result_data(self, reliability_obj) -> collections.OrderedDict[str, Any]: ...
    def _parse_stats_data(self, stats_obj) -> collections.OrderedDict[str, Any]: ...
    def _parse_study_data(self, study_obj) -> collections.OrderedDict[str, Any]: ...
    def _write_to_disk(self, module_name, module_data) -> None: ...
    def fetch_clusters(self) -> None: ...
    def fetch_item_data(self) -> None: ...
    def fetch_moments(self) -> None: ...
    def fetch_moments_result(self) -> None: ...
    def fetch_recipes(self) -> None: ...
    def fetch_reliability(self) -> None: ...
    def fetch_stats_data(self) -> None: ...
    def fetch_studies_recipes(self) -> None: ...
    def reset_data_lists(self) -> None: ...

class RemindoCollectException(Exception):
    __doc__: str
    error_msg: Any
    def __init__(self, error_msg) -> None: ...
    def __str__(self) -> Any: ...
